from config import *


'''
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
'''


@dp.message(CommandStart())  # /start
async def cmd_start(message: Message):
    add_user(message.from_user.id, message.from_user.username)
    await message.answer(text=phrases["start"])


@dp.message(Isban())
async def catch_text(message: Message):
    await ban_msg(message)


@dp.message(Command(commands='about'))  # /about
async def cmd_about(message: Message):
    await message.answer(phrases["about"])


@dp.message(Command(commands='help'))  # /help
async def cmd_help(message: Message):
    await message.answer(phrases["help"])


@dp.message(Command(commands='alpha'))  # /alpha
async def cmd_help(message: Message):
    await message.answer(phrases["alpha"])


# async def edit_msg(user_id: int, msg_id: int, msg: str):
#     space = await search_phrase(msg)
#
#     if space is not None:
#         await bot.edit_message_text(chat_id=user_id,
#                                     message_id=msg_id,
#                                     disable_web_page_preview=True,
#                                     text=await make_msg(space),
#                                     reply_markup=await make_inline_kb(space['kb']))
#     else:
#         await bot.edit_message_text(chat_id=user_id,
#                                     message_id=msg_id,
#                                     text=F"–ü–æ–ª–µ {msg + ' ' if msg.isdigit() else ''}–Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
#
#
# @dp.callback_query(Callback())
# async def fill_preset(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#     await state.set_state(Preset.system)
#     await bot.send_message(callback.from_user.id, '–ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–µ—Å–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫\n'
#                                                   '<code>'
#                                                   '> <b>–°–∏—Å—Ç–µ–º–∞</b>: \n'
#                                                   '  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \n'
#                                                   '  –ë—Ä–∞—É–∑–µ—Ä: '
#                                                   '</code>')
#
#
# @dp.message(state=Preset.system)
# async def process_color(message: Message, state: FSMContext):
#     user_color = message.text
#     await state.update_data(color=user_color)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
#     await Preset.  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
#     await message.reply("–ö–∞–∫–æ–µ –≤–∞—à–µ –ª—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?")  # –ó–∞–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
#
#
# @dp.message_handler(state=Form.waiting_for_animal)
# async def process_animal(message: types.Message, state: FSMContext):
#     user_animal = message.text
#     await state.update_data(animal=user_animal)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
#     await Form.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
#     await message.reply("–ö–∞–∫–æ–µ –≤–∞—à–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ?")  # –ó–∞–¥–∞—ë–º —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
#
# @dp.message_handler(state=Form.waiting_for_food)
# async def process_food(message: types.Message, state: FSMContext):
#     user_food = message.text
#     await state.update_data(food=user_food)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
#     data = await state.get_data()
#     color = data.get('color')
#     animal = data.get('animal')
#     food = data.get('food')
#
#     await message.reply(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã! üéâ\n"
#                          f"–í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {color}\n"
#                          f"–í–∞—à–µ –ª—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal}\n"
#                          f"–í–∞—à–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ: {food}")
#
#     await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


'''
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤. 
'''


@dp.message(Command(commands='root'), Isadmin())  # /root
async def cmd_demote_admin(message: Message):
    upd_user_admin_status(message.from_user.id, 0)
    await message.answer(phrases['dem_admin'])


@dp.message(Command(commands='root'))  # /root
async def cmd_add_admin(message: Message):
    password = await get_cmd_args(message)

    if password[0] == PASSWORD:
        upd_user_admin_status(message.from_user.id, 1)
        await message.answer(phrases['new_admin'])


@dp.message(Command(commands='get_phrases'), Isadmin())  # /get_phrases
async def cmd_get_phrases(message: Message):
    for phrase in phrases.keys():
        await message.answer(f'<b>{phrase}</b>')
        await message.answer(phrases[phrase])
    await message.answer(f'<b>/getcoms</b>')
    await cmd_getcoms(message)


@dp.message(Command(commands='getcoms'), Isadmin())  # /getcoms
async def cmd_getcoms(message: Message):
    await message.answer(
        "<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>\n"
        "/getusers ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/circleID {id} ‚Äî –∫—Ä—É–∂–æ–∫ –ø–æ –ê–π–î–∏—à–Ω–∏–∫—É\n\n"
        "<b>–†–∞–±–æ—Ç–∞ —Å –±–∞–≥–∞–º–∏</b>\n"
        "/getcoms ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã (–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
        "<b>–î–ª—è –ø–ª–µ–±—Å–∞</b>\n"
        "/start ‚Äî —Å—Ç–∞—Ä—Ç, –µ—Å—Ç—å —Å—Ç–∞—Ä—Ç\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help ‚Äî –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n"
        "/morfinizm ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—è–≥, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –≤ —á–∞—Ç–∏–∫ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∏–¥–∏–∫\n\n"
        "<i>–†–µ–≥–∏—Å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤–∞–∂–µ–Ω.\n"
        "–°–æ–≤–µ—Ç—É—é –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∏—Å–∞—Ç—å.\n"
        "–í—Å–µ ID –∏ HASH –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã (–ï—Å–ª–∏ –æ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º)</i>"
    )


@dp.message(Command(commands='kiss'), Issuperadmin())  # /kiss
async def cmd_delete_admin(message: Message):
    userid = await get_cmd_id(message)

    if userid == -1:
        return

    if not Isadmin.check(userid):
        await message.answer(phrases['err_user_not_admin'])
        return

    upd_user_admin_status(userid, 0)
    await bot.send_message(chat_id=userid, text=phrases["kiss_admin"])
    await message.answer(phrases["del_admin"])


@dp.message(Command(commands='banana'), Issuperadmin())  # /banana
async def cmd_delete_admin(message: Message):
    userid = await get_cmd_id(message)

    if userid == -1:
        return

    upd_user_admin_status(userid, 0)
    upd_user_ban_status(userid, 1)
    await message.answer(phrases["ban_user"])


@dp.message(Command(commands='banana'), Isadmin())  # /banana
async def cmd_delete_admin(message: Message):
    userid = await get_cmd_id(message)

    if userid == -1:
        return

    if Isadmin.check(userid):
        await message.answer(phrases['err_user_admin'])
        return

    upd_user_ban_status(userid, 1)
    await message.answer(phrases["ban_user"])


@dp.message(F.text, Isadmin())
async def catch_admin_text(message: Message):
    await message.answer(phrases['default_answers_admin'])


@dp.message(F.content_type.in_({ContentType.TEXT,
                                ContentType.PHOTO,
                                ContentType.VOICE,
                                ContentType.VIDEO}))
async def catch_default(message: Message):
    presets = get_presets_from_user(message.from_user.id)

    print(presets)

    if len(presets) == 0:
        await message.reply(f"{phrases['no_presets']}", reply_markup=kb.no_presets)


@dp.message(F.text)
async def catch_text(message: Message):
    presets = get_presets_from_user(message.from_user.id)

    print(presets)

    if len(presets) == 0:
        await message.reply(f"{phrases['no_presets']}", reply_markup=kb.no_presets)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print("–ü–æ–≥–Ω–∞–ª–∏ –ª–æ–≤–∏—Ç—å –±–∞–≥–∏!")
    asyncio.run(main())